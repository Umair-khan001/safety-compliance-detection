#!/usr/bin/env python3
"""
ERD Generator for PPE Detection System Database
Creates visual Entity Relationship Diagram using matplotlib and graphviz
"""

import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from matplotlib.patches import FancyBboxPatch, ConnectionPatch
import numpy as np

def create_erd_diagram():
    """Generate visual ERD diagram for PPE Detection System"""
    
    # Create figure and axis
    fig, ax = plt.subplots(1, 1, figsize=(16, 12))
    ax.set_xlim(0, 10)
    ax.set_ylim(0, 10)
    ax.axis('off')
    
    # Define colors
    primary_color = '#3B82F6'      # Blue
    secondary_color = '#10B981'    # Green
    accent_color = '#F59E0B'       # Amber
    text_color = '#1F2937'         # Dark gray
    bg_color = '#F9FAFB'           # Light gray
    
    # Set background
    fig.patch.set_facecolor('white')
    
    # Title
    ax.text(5, 9.5, 'PPE Detection System - Entity Relationship Diagram', 
            fontsize=20, fontweight='bold', ha='center', color=text_color)
    
    # USERS table
    users_box = FancyBboxPatch((0.5, 6), 3, 2.5, 
                               boxstyle="round,pad=0.1", 
                               facecolor=primary_color, 
                               edgecolor='black', 
                               alpha=0.8)
    ax.add_patch(users_box)
    
    # Users table content
    users_text = """USERS
    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    üîë id (PK)              SERIAL
    üìß email (UK)           VARCHAR
    üë§ username (UK)        VARCHAR
    üîí password_hash        VARCHAR
    üë® first_name           VARCHAR
    üë© last_name            VARCHAR
    üé≠ role                 VARCHAR
    üìä status               VARCHAR
    üìÖ registration_date    TIMESTAMP
    ‚úÖ approved_date        TIMESTAMP
    üë®‚Äçüíº approved_by (FK)     INTEGER
    üïê last_login           TIMESTAMP
    üìû phone                VARCHAR
    üè¢ company              VARCHAR"""
    
    ax.text(2, 7.2, users_text, fontsize=8, ha='center', va='center', 
            color='white', fontweight='bold')
    
    # USER_ACTIVITY_LOGS table
    activity_box = FancyBboxPatch((0.5, 3), 3, 2.2, 
                                  boxstyle="round,pad=0.1", 
                                  facecolor=secondary_color, 
                                  edgecolor='black', 
                                  alpha=0.8)
    ax.add_patch(activity_box)
    
    activity_text = """USER_ACTIVITY_LOGS
    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    üîë id (PK)              SERIAL
    üë§ user_id (FK)         INTEGER
    üéØ activity_type        VARCHAR
    üìù description          TEXT
    üé• video_filename       VARCHAR
    üîç detection_results    JSON
    üåê ip_address           INET
    üñ•Ô∏è user_agent           TEXT
    üìÖ created_at           TIMESTAMP"""
    
    ax.text(2, 4.1, activity_text, fontsize=8, ha='center', va='center', 
            color='white', fontweight='bold')
    
    # DETECTION_SESSIONS table
    sessions_box = FancyBboxPatch((6, 3), 3, 2.5, 
                                  boxstyle="round,pad=0.1", 
                                  facecolor=accent_color, 
                                  edgecolor='black', 
                                  alpha=0.8)
    ax.add_patch(sessions_box)
    
    sessions_text = """DETECTION_SESSIONS
    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    üîë id (PK)              SERIAL
    üë§ user_id (FK)         INTEGER
    üé≠ session_type         VARCHAR
    üé• video_filename       VARCHAR
    üéØ confidence_threshold DECIMAL
    üìä total_detections     INTEGER
    ‚úÖ safe_detections      INTEGER
    ‚ùå unsafe_detections    INTEGER
    ‚è±Ô∏è session_duration     INTEGER
    üìä status               VARCHAR
    üïê started_at           TIMESTAMP
    üèÅ completed_at         TIMESTAMP"""
    
    ax.text(7.5, 4.2, sessions_text, fontsize=8, ha='center', va='center', 
            color='white', fontweight='bold')
    
    # Relationships arrows
    # Users to Activity Logs (1:N)
    arrow1 = ConnectionPatch((2, 6), (2, 5.2), "data", "data",
                            arrowstyle="->", shrinkA=5, shrinkB=5,
                            mutation_scale=20, fc="black", lw=2)
    ax.add_artist(arrow1)
    ax.text(1.3, 5.6, '1:N', fontsize=10, fontweight='bold', color=text_color)
    
    # Users to Detection Sessions (1:N)
    arrow2 = ConnectionPatch((3.5, 7), (6, 4.5), "data", "data",
                            arrowstyle="->", shrinkA=5, shrinkB=5,
                            mutation_scale=20, fc="black", lw=2)
    ax.add_artist(arrow2)
    ax.text(4.7, 5.8, '1:N', fontsize=10, fontweight='bold', color=text_color)
    
    # Self-reference (Users approved_by)
    arrow3 = ConnectionPatch((1, 8.5), (1, 7.5), "data", "data",
                            arrowstyle="->", shrinkA=5, shrinkB=5,
                            mutation_scale=20, fc="gray", lw=2)
    ax.add_artist(arrow3)
    ax.text(0.3, 8, 'Self\nRef', fontsize=8, fontweight='bold', color='gray')
    
    # Legend
    legend_elements = [
        mpatches.Patch(color=primary_color, label='Users Entity'),
        mpatches.Patch(color=secondary_color, label='Activity Logs Entity'),
        mpatches.Patch(color=accent_color, label='Detection Sessions Entity'),
    ]
    ax.legend(handles=legend_elements, loc='upper right', bbox_to_anchor=(0.98, 0.98))
    
    # Relationship explanations
    ax.text(5, 2, 'Relationship Types:', fontsize=14, fontweight='bold', ha='center', color=text_color)
    
    relationships_text = """
    ‚Ä¢ Users ‚Üî Activity Logs: One-to-Many (1:N) - One user can have multiple activity entries
    ‚Ä¢ Users ‚Üî Detection Sessions: One-to-Many (1:N) - One user can have multiple detection sessions  
    ‚Ä¢ Users ‚Üî Users: Self-Reference - Admin users can approve other users (approved_by field)
    
    Key Features:
    üîë Primary Keys (PK)    üìß Unique Keys (UK)    üîó Foreign Keys (FK)    üóëÔ∏è CASCADE DELETE
    """
    
    ax.text(5, 1.2, relationships_text, fontsize=10, ha='center', va='center', color=text_color)
    
    # Database info
    ax.text(5, 0.3, 'Database: PostgreSQL ‚Ä¢ Hosting: Neon.tech ‚Ä¢ Tables: 3 ‚Ä¢ Indexes: 4', 
            fontsize=10, ha='center', fontweight='bold', 
            bbox=dict(boxstyle="round,pad=0.3", facecolor=bg_color, edgecolor=primary_color))
    
    plt.tight_layout()
    return fig

def save_erd_diagram():
    """Save ERD diagram to file"""
    fig = create_erd_diagram()
    
    # Save as high-quality PNG
    fig.savefig('PPE_Database_ERD.png', dpi=300, bbox_inches='tight', 
                facecolor='white', edgecolor='none')
    
    # Save as PDF
    fig.savefig('PPE_Database_ERD.pdf', bbox_inches='tight', 
                facecolor='white', edgecolor='none')
    
    print("‚úÖ ERD diagrams saved:")
    print("   ‚Ä¢ PPE_Database_ERD.png (High-resolution image)")
    print("   ‚Ä¢ PPE_Database_ERD.pdf (Vector format)")
    
    plt.show()

if __name__ == "__main__":
    # Create and save ERD diagram
    save_erd_diagram()
